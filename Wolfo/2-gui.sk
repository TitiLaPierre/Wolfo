#
# This file is part of Wolfo.
#
# Wolfo is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Wolfo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Wolfo.  If not, see <https://www.gnu.org/licenses/>.
#
# Copyright 2020 - Romitou <romitou@protonmail.com> and contributors
#

# Many code in this file needs to be cleaned up.
# We're currently working on it!

on script load:
	send join "&3&lWolfo &7&l▪ &8Took %difference between now and {wolfo::loading}%." to ops
	send "" to ops
	send "&3&lWolfo &7&l▪ &7Loading GUI ..." to ops
	set {wolfo::loading} to now

function wolfoMenuDeco(p: player, t: text, i: integer = 6):
	wolfoDebug("Opening menu to %{_p}% with name %{_t}%")
	{wolfo::vote::open} is true:
		{wolfo::role::list::TOWNSFOLK::*} do not contain {_p}
		open virtual chest inventory with {_i} rows named wolfoGetText("ROLES.TOWNSFOLK.NAME", {_p}) to {_p}
		add {_p} to {wolfo::role::list::TOWNSFOLK::*}
		wolfoMenuVote("TOWNSFOLK")
	else:
		open virtual chest inventory with {_i} rows named "%{_t}%" to {_p}
	if {_i} = 3:
		make a gui slot 1, 2, 3, 4, 5, 6, 7, 9, 10, 16, 17, 19, 20, 21, 23, 24 and 25 of {_p} with light blue stained glass pane named "&f"
		make a gui slot 0, 8, 18 and 26 of {_p} with blue stained glass pane named "&f"
		make a gui slot 22 of {_p} with (wolfoGetText("OTHER_ITEMS.CLOSE") parsed as item) named colored wolfoGetText("ITEM.CLOSE", {_p}) to close
	else if {_i} = 5:
		make a gui slot 1, 2, 3, 4, 5, 6, 7, 9, 10, 16, 17, 18, 26, 27, 28, 34, 35, 37, 38, 39, 41, 42 and 43 of {_p} with light blue stained glass pane named "&f"
		make a gui slot 0, 8, 36 and 44 of {_p} with blue stained glass pane named "&f"
		make a gui slot 40 of {_p} with (wolfoGetText("OTHER_ITEMS.CLOSE") parsed as item) named colored wolfoGetText("ITEM.CLOSE", {_p}) to close
	else if {_i} = 6:
		make a gui slot 1, 2, 3, 4, 5, 6, 7, 9, 10, 16, 17, 18, 26, 27, 35, 36, 37, 43, 44, 45, 46, 47, 48, 50, 51 and 52 of {_p} with light blue stained glass pane named "&f"
		make a gui slot 0, 8, 45 and 53 of {_p} with blue stained glass pane named "&f"
		make a gui slot 49 of {_p} with (wolfoGetText("OTHER_ITEMS.CLOSE") parsed as item) named colored wolfoGetText("ITEM.CLOSE", {_p}) to close

function wolfoMenuRoles(p: player):
	set {_title} to wolfoGetText("GUI.ROLES", {_p})
	wolfoMenuDeco({_p}, {_title}, 5)
	set {_loop} to 11
	loop yaml node list "ROLES" from "config":
		while {_loop} is 16, 17, 18, 26, 27 or 28:
			add 1 to {_loop}
		set {_item} to wolfoGetText("%loop-node%.ITEM") parsed as material
		add wolfoGetText("%loop-node%.NBT") to nbt of {_item} if {_item} is a player head
		set {_lore::*} to wolfoGetObjects("%loop-node%.DESC", {_p})
		make a gui slot {_loop} of {_p} with {_item} named colored wolfoGetText("%loop-node%.NAME", {_p}) with lore colored {_lore::*}
		add 1 to {_loop}
		wait 2 ticks

on inventory close:
	remove player from {wolfo::role::list::TOWNSFOLK::*}

function wolfoMenuVote(role: text):
	wolfoDebug("Opening vote menu to %{_role}% role")
	loop {wolfo::role::list::%{_role}%::*}:
		set {_voter} to loop-value-1
		unformat all gui slots of {_voter}
		set {_name} to wolfoGetText("ROLES.%{_role}%.NAME", {_voter})
		wolfoMenuDeco({_voter}, {_name}, 6)
		set {_loop} to 11
		loop {wolfo::players::alive::*}:
			set {_target} to loop-value-2
			while {_loop} is 16, 17, 18, 26, 27, 35, 36 or 37:
				add 1 to {_loop}
			# CUPID -------------------------------------------
			if {_role} is "CUPID":
				if {wolfo::results::CUPID::*} do not contain {_target}:
					set {_material} to {_target}'s skull named "&9%{_target}% &f- &7❤" with lore ""
				else:
					set {_material} to {_target}'s skull named "&9%{_target}% &f- &c❤" with lore "", wolfoGetText("MESSAGE.SELECTIONNED", {_voter}) and ""
				make a gui slot {_loop} of {_voter} with {_material} to run:
					if {wolfo::results::CUPID::*} contains {_target}:
						remove {_target} from {wolfo::results::CUPID::*}
					else:
						size of {wolfo::results::CUPID::*} is not 2
						add {_target} to {wolfo::results::CUPID::*}
					wolfoMenuVote({_role})
			# WEREWOLF -------------------------------------------
			else if {_role} is "WEREWOLF" or "TOWNSFOLK":
				if {wolfo::vote::players::%{_target}%::*} is not set:
					set {_novote} to wolfoGetText("MESSAGE.NO_VOTE", {_voter})
					set {_material} to {_target}'s skull named "&9%{_target}% &f- %{_novote}%" with lore "" and wolfoGetText("MESSAGE.NO_VOTER", {_voter})
				else:
					set {_size} to size of {wolfo::vote::players::%{_target}%::*}
					set {_vote} to wolfoGetText("MESSAGE.VOTE", {_voter})
					set {_voting} to wolfoGetText("MESSAGE.VOTING", {_voter})
					set {_material} to {_target}'s skull named "&9%{_target}% &f- &b%size of {wolfo::vote::players::%{_target}%::*}% %{_vote}%" with lore "" and "%{_voting}%: %{wolfo::vote::players::%{_target}%::*}%"
				make a gui slot {_loop} of {_voter} with {_material} to run:
					if {wolfo::vote::voters::%{_voter}%} is not set:
						set {wolfo::vote::voters::%{_voter}%} to {_target}
					else:
						remove {_voter} from {wolfo::vote::players::%{wolfo::vote::voters::%{_voter}%}%::*}
						remove {_target} from {wolfo::vote::list::*}
					add {_voter} to {wolfo::vote::players::%{_target}%::*}
					add {_target} to {wolfo::vote::list::*}
					set {wolfo::vote::voters::%{_voter}%} to {_target}
					{_role} is "WEREWOLF":
						send join wolfoGetText("PREFIX.GENERAL") and wolfoGetText("MESSAGE.VOTE_COUNTED", {_voter}) to {_voter}
					else:
						loop {wolfo::players::list::*}:
							set {_against} to wolfoGetText("MESSAGE.VOTE_AGAINST", loop-value-3)
							send join wolfoGetText("PREFIX.GENERAL") and "&b%{_voter}%&7 %{_against}% &b%{_target}%&7..." to loop-value-3
					wolfoMenuVote({_role})
			# DOCTOR -------------------------------------------
			else if {_role} is "DOCTOR":
				
				set {_protect} to wolfoGetText("MESSAGE.WORDS.PROTECT", {_voter})
				set {_wwvote} to wolfoGetText("MESSAGE.WEREWOLF_VOTE", {_voter})
				make a gui slot {_loop} of {_voter} with {_target}'s skull named "&9%{_target}%" with lore "", "&7%{_protect}% &b%{_target}%&7 du", {_wwvote} and "" to run:
					{wolfo::role::DOCTOR::lastprotect} is {_target}:
						send join wolfoGetText("PREFIX.GENERAL") and wolfoGetText("MESSAGE.ALREADY_PROTECTED", {_voter}) to {_voter}
						stop
					close {_voter}'s inventory
					set {wolfo::timer} to 0
					set {wolfo::results::DOCTOR} to {_target}
					set {wolfo::role::DOCTOR::lastprotect} to {_target}
					send join wolfoGetText("PREFIX.GENERAL") and wolfoGetText("MESSAGE.VOTE_PROTECTED", {_voter}) to {_voter}
			# SEER -------------------------------------------
			else if {_role} is "SEER" or "SEER_AURA":
				set {_type} to wolfoGetText("MESSAGE.WORDS.ROLE", {_voter}) if {_role} is "SEER" otherwise (wolfoGetText("MESSAGE.WORDS.AURA", {_voter}))
				set {_discover} to wolfoGetText("MESSAGE.WORDS.DISCOVER", {_voter})
				set {_of} to wolfoGetText("MESSAGE.WORDS.OF", {_voter})
				set {_is} to wolfoGetText("MESSAGE.WORDS.IS", {_voter})
				make a gui slot {_loop} of {_voter} with {_target}'s skull named "&9%{_target}%" with lore "", "&7%{_discover}% %{_type}%" and "&7%{_of}% &b%{_target}% &7! :D" and "" to run:
					close {_voter}'s inventory
					if {_role} is "SEER":
						set {_reveal} to {wolfo::players::role::%{_target}%}
					else if {_role} is "SEER_AURA":
						set {_aura} to wolfoGetText("ROLES.%{wolfo::players::role_name::%{_target}%}%.AURA")
						set {_reveal} to wolfoGetText("AURA.%{_aura}%", {_voter})
					send join wolfoGetText("PREFIX.GENERAL") and "Wow, %{_type}% &f%{_of}% &b%{_target}%&f %{_is}% : %{_reveal}%&f." to {_voter}
					set {wolfo::vote::voters::%{_voter}%} to true
					set {wolfo::results::%{_role}%} to {_reveal}
					set {wolfo::timer} to 0
			# SHOOTER -------------------------------------------
			else if {_role} is "SHOOTER":
				set {_shoot} to wolfoGetText("MESSAGE.WORDS.SHOOT", {_voter})
				set {_on} to wolfoGetText("MESSAGE.WORDS.ON1", {_voter})
				set {_shooted} to wolfoGetText("MESSAGE.SHOOTED", {_voter})
				make a gui slot {_loop} of {_voter} with {_target}'s skull named "&9%{_target}%" with lore "", "&7%{_shoot}%" and "&7%{_on}% &b%{_target}%" and "" to run:
					close {_voter}'s inventory
					add 1 to {wolfo::role::SHOOTER::bullets}
					send join wolfoGetText("PREFIX.GENERAL") and "&7%{_shooted}% &7%{_on}% &b%{_target}%&f." to {_voter}
					set {wolfo::vote::voters::%{_voter}%} to true
					set {wolfo::results::%{_role}%} to {_target}
					set {wolfo::timer} to 0
			# WITCH -------------------------------------------
			# Désolé, cette partie sera optimisée plus tard.
			else if {_role} is "WITCH":
				set {_result::*} to wolfoMostVoted()
				if {_result::*} is not set:
					send join wolfoGetText("PREFIX.GENERAL") and wolfoGetText("MESSAGE.NO_WEREWOLF_VOTE", {_voter}) to {_voter}
					set {wolfo::timer} to 0
				else if size of {wolfo::potions::*} is 2:
					set {wolfo::timer} to 0
				else:
					set {_wasvoted} to wolfoGetText("MESSAGE.WAS_VOTED", {_voter})
					make a gui slot 22 of {_voter} with {_result::1}'s skull named "&9%{_result::1}%" with lore "", "&b%{_result::1}%&7 %{_wasvoted}%", wolfoGetText("MESSAGE.BY_WEREWOLF", {_voter}) and ""
					set {_regeneration::*} to wolfoGetObjects("MESSAGE.POTIONS.REGENERATION.DESC", {_voter})
					set {_strength::*} to wolfoGetObjects("MESSAGE.POTIONS.STRENGTH.DESC", {_voter})
					make a gui slot 20 of {_voter} with potion of regeneration named wolfoGetText("MESSAGE.POTIONS.REGENERATION.NAME", {_voter}) with lore {_regeneration::*}
					make a gui slot 24 of {_voter} with potion of strength named wolfoGetText("MESSAGE.POTIONS.STRENGTH.NAME", {_voter}) with lore {_strength::*}
					if {wolfo::potions::1} is not set:
						set {_regeneration::*} to wolfoGetObjects("MESSAGE.POTIONS.REGENERATION.LORE", {_voter})
						make a gui slot 29 of {_voter} with light green dye named wolfoGetText("MESSAGE.POTIONS.SELECT", {_voter}) with lore {_regeneration::*} to run:
							send join wolfoGetText("PREFIX.GENERAL") and wolfoGetText("MESSAGE.POTIONS.REGENERATION.SUCCESS", {_voter}) to {_voter}
							close {_voter}'s inventory
							set {wolfo::timer} to 0
							set {wolfo::results::WITCH} to true
							set {wolfo::potions::1} to true
					else:
						set {_used::*} to wolfoGetObjects("MESSAGE.POTIONS.USED.LORE", {_voter})
						make a gui slot 29 of {_voter} with gray dye named wolfoGetText("MESSAGE.POTIONS.USED.NAME", {_voter}) with lore {_used::*}
					if {wolfo::potions::2} is not set:
						set {_select::*} to wolfoGetObjects("MESSAGE.POTIONS.SELECT.LORE", {_voter})
						make a gui slot 33 of {_voter} with light green dye named wolfoGetText("MESSAGE.POTIONS.SELECT", {_voter}) with lore {_select::*} to run:
							send join wolfoGetText("PREFIX.GENERAL") and wolfoGetText("MESSAGE.POTIONS.STRENGHT.SUCCESS", {_voter}) to {_voter}
							close {_voter}'s inventory
							set {wolfo::timer} to 0
							set {wolfo::results::WITCH} to true
							set {wolfo::potions::2} to true
					else:
						set {_used::*} to wolfoGetObjects("MESSAGE.POTIONS.USED.LORE", {_voter})
						make a gui slot 33 of {_voter} with gray dye named wolfoGetText("MESSAGE.POTIONS.USED.NAME", {_voter}) with lore {_used::*}
			add 1 to {_loop}

function wolfoMenu(p: player, type: text):
	if {_p} is not op:
		send join wolfoGetText("PREFIX.GENERAL") and wolfoGetText("MESSAGE.PERMISSION.MESSAGE", {_p}) to {_p}
	else:
		set {_title} to wolfoGetText("GUI.%{_type}%", {_p})
		wolfoMenuDeco({_p}, {_title}, 3)
		set {_loop} to 11
		if {_type} is "SETUP":
			set {_steps::*} to wolfoGetObjects("GAME.SETUP.STEPS")
		loop yaml node list "%{_type}%" from "config":
			while {_loop} is 16, 17, 18, 26, 27 or 28:
				add 1 to {_loop}
			set {_item} to wolfoGetText("%loop-node%") parsed as material
			set {_lore::*} to wolfoGetObjects("%loop-node%.LORE", {_p})
			{_type} is "SETUP":
				{_steps::*} contains "%loop-node%"
				add wolfoGetText("MESSAGE.FINISHED", {_p}) to {_lore::*}
			make a gui slot {_loop} of {_p} with {_item} named colored wolfoGetText("%loop-node%.NAME", {_p}) with lore colored {_lore::*} to run:
				wolfoMenuAction({_p}, {_loop}, {_type})
			add 1 to {_loop}
			wait 2 ticks

function wolfoLang(p: player, lang: text):
	if {_lang} is not set:
		set {_title} to wolfoGetText("GUI.LANG", {_p})
		wolfoMenuDeco({_p}, {_title}, 6)
		set {_loop} to 11
		loop {wolfo::config::*}:
			loop-value is not "config"
			set {_value} to loop-value
			while {_loop} is 16, 17, 18, 26, 27 or 28:
				add 1 to {_loop}
			set {_item} to (wolfoGetText("LANGUAGES.PROPERTIES.%{_value}%.ITEM") parsed as material) otherwise (oak wood floor sign)
			set name of {_item} to (wolfoGetText("LANGUAGES.PROPERTIES.%{_value}%.NAME")) otherwise ({_value})
			add wolfoGetText("LANGUAGES.PROPERTIES.%{_value}%.NBT") to nbt of {_item}
			format gui slot {_loop} of {_p} with {_item} named colored wolfoGetText("LANGUAGES.PROPERTIES.%{_value}%.NAME") to run:
				wolfoLang({_p}, {_value})
				close {_p}'s inventory
			add 1 to {_loop}
	else:
		if {wolfo::config::*} doesn't contain {_lang}:
			send join wolfoGetText("PREFIX.GENERAL") and wolfoGetText("MESSAGE.LANG.UNKNOWN", {_p}) to {_p}
		else:
			set {wolfo::players::lang::%{_p}%} to {_lang}
			send join wolfoGetText("PREFIX.GENERAL") and wolfoGetText("MESSAGE.LANG.CHANGED", {_p}), (colored wolfoGetText("LANGUAGES.PROPERTIES.%{_lang}%.NAME") otherwise ("&b%{_lang}%")) and "&f." to {_p}
			set {_texts::*} to wolfoGetObjects("MESSAGE.LANG.WARNING", {_p})
			send colored {_texts::*} to {_p}
			wolfoSb({_p})
