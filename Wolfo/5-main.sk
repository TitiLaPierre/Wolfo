#
# This file is part of Wolfo.
#
# Wolfo is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Wolfo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Wolfo.  If not, see <https://www.gnu.org/licenses/>.
#
# Copyright 2020 - Romitou <romitou@protonmail.com> and contributors
#

on script load:
	send join "&3&lWolfo &7&l▪ &8Took %difference between now and {wolfo::loading}%." to ops
	send "" to ops
	send "&3&lWolfo &7&l▪ &7Loading main ..." to ops
	set {wolfo::loading} to now
	wolfoInitialize()

function wolfoInitialize():
	set {wolfo::game::status} to "WAIT" if {wolfo::game::status} is not set
	set {wolfo::game::day} to "0" if {wolfo::game::day} is not set

function wolfoHelp(msg: text, p: player):
	send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.%{_msg}%.TITLE", 2, {_p}) to {_p}
	set {_help::%{_msg}%::*} to wolfoGetObjects("MESSAGE.%{_msg}%.MSG", 2, {_p})
	loop {_help::%{_msg}%::*}:
		send colored loop-value to {_p}

function wolfoJoin(p: player):
	set {wolfo::players::lang::%{_p}%} to wolfoGetText("LANGUAGES.DEFAULT", 1) if {wolfo::players::lang::%{_p}%} is not set
	loop all players:
		send join wolfoGetText("PREFIX.GENERAL", 2, loop-player), "&b%{_p}% ", wolfoGetText("MESSAGE.JOINED", 2, loop-player) and " &8(&7%amount of all players%&8/&75&8)" to loop-player
	set {_p}'s xp to 0
	teleport {_p} to wolfoGetLoc("GAME.LOCATIONS.BEGIN")
	set {_p}'s gamemode to adventure
	clear {_p}'s inventory
	heal {_p}
	reset {_p}'s walk speed
	set slot 0 of {_p} to enchanted book named wolfoGetText("ITEM.COSM", 2, {_p})
	set slot 4 of {_p} to book named wolfoGetText("ITEM.INFO", 2, {_p})
	set slot 8 of {_p} to orange bed named wolfoGetText("ITEM.EXIT", 2, {_p})
	set slot 6 of {_p} to magma cream named wolfoGetText("ITEM.SETUP", 2, {_p}) if {_p} is op
	set slot 2 of {_p} to ender pearl named wolfoGetText("ITEM.MANAGE", 2, {_p}) if {_p} is op
	set {wolfo::players::role::%{_p}%} to "&7Aucun"
	set {wolfo::players::life::%{_p}%} to "&aEn vie"
	wolfoSbPlayer({_p}, 0)
	wolfoDebug("%{_p}% joined the game.")
	wait 1 second
	send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.WELCOME", 2, {_p}) to {_p}

function wolfoLeave(p: player):
	loop all players:
		send join wolfoGetText("PREFIX.GENERAL", 1, loop-player), "&b%{_p}% ", wolfoGetText("MESSAGE.LEFT", 2, loop-player) and " &8(&7%amount of all players - 1%&8/&75&8)" to loop-player
	wolfoSbPlayer({_p}, 1)
	remove {_p} from {wolfo::role::list::%{wolfo::players::role_name::%{_p}%}%::*}
	remove {_p} from {wolfo::players::list::*}
	remove {_p} from {wolfo::players::alive::*}
	wolfoDebug("%{_p}% left the game.")

command /wolfo [<text>] [<text>] [<integer>]:
	trigger:
		if arg 1 is "help":
			wolfoHelp("COMMANDS", player)
		else if arg 1 is "setup":
			wolfoMenu(player, "SETUP")
		else if arg 1 is "manage":
			wolfoMenu(player, "MANAGE")
		else if arg 1 is "whitelist":
			wolfoWhitelist(player, arg-2, arg-3)
		else if arg 1 is "lang":
			wolfoLang(player, arg-2)
		else:
			wolfoHelp("COMMANDS", player)

function wolfoWhitelist(executor: player, target: text, action: integer):
	if {_executor} is not op:
		send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.PERMISSION.MESSAGE", 2, {_executor}) to {_executor}
	else:
		set {_check::*} to wolfoGetObjects("GAME.WHITELIST", 1)
		if {_action} is 1:
			if {_check::*} do not contain {_target}:
				wolfoUpdateO("GAME.WHITELIST", {_target}, 0)
				send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.WHITELISTED_SUCCESS", 2, {_executor}) to {_executor}
			else:
				send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.WHITELISTED_ALREADY", 2, {_executor}) to {_executor}
		else if {_action} is 2:
			if {_check::*} contains {_target}:
				wolfoUpdateO("GAME.WHITELIST", {_target}, 1)
				send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.NOT_WHITELISTED_SUCCESS", 2, {_executor}) to {_executor}
			else:
				send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.NOT_WHITELISTED_ALREADY", 2, {_executor}) to {_executor}
		else if {_action} is not set:
			if {_target} is set:
				if {_check::*} do not contain {_target}:
					set {_add} to wolfoGetText("MESSAGE.ADD_WHITELIST", 2, {_executor})
					set {_allow} to wolfoGetText("MESSAGE.ALLOW_ACCESS", 2, {_executor})
					send formatted join wolfoGetText("PREFIX.GENERAL", 1), wolfoGetText("MESSAGE.NOT_WHITELISTED", 2, {_executor}) and "          <cmd:/wolfo whitelist %{_target}% 1><tooltip:&a%{_add}%>&a[%{_allow}% %{_target}%]&r" to {_executor}
				else:

					set {_remove} to wolfoGetText("MESSAGE.REMOVE_WHITELIST", 2, {_executor})
					set {_deny} to wolfoGetText("MESSAGE.DENY_ACCESS", 2, {_executor})
					send formatted join wolfoGetText("PREFIX.GENERAL", 1), wolfoGetText("MESSAGE.WHITELISTED", 2, {_executor}) and "          <cmd:/wolfo whitelist %{_target}% 2><tooltip:&c%{_remove}%>&c[%{_deny}% %{_target}%]&r" to {_executor}
			else:
				send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.WHITELIST.LIST.1", 2, {_executor}) to {_executor}
				if {_check::*} is not set:
					add wolfoGetText("MESSAGE.NO_PLAYER", 2, {_executor}) to {_check::*}
				loop {_check::*}:
					send "&b[&6%loop-index%&b] &f%loop-value%" to {_executor}
				send wolfoGetText("MESSAGE.WHITELIST.LIST.2", 2, {_executor}) to {_executor}

function wolfoCheckStart(p: player):
	if wolfoGetText("GAME.SETUP.FINISH", 1) is "finished": # C'est moche, mais ça sera corrigé dans les prochaines versions. :)
		if {wolfo::debug::status} is true:
			wolfoTimer(5)
			stop
		if size of all players < 5:
			send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.NOTENOUGH", 2, {_p}) to {_p}
		else:
			set {_pos} to size of node list "GAME.LOCATIONS.SPAWNPOINTS" from "config"
			if {_pos} is greater than or equal to size of all players:
				send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.FORCESTART", 2, {_p}) to {_p}
				wolfoTimer(5)
				send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.START.PREPARE", 2, {_p}) to all players
			else:
				set {_notenough} to wolfoGetText("MESSAGE.TP_NOT_ENOUGH", 2, {_p})
				send join wolfoGetText("PREFIX.GENERAL", 1) and "&c%{_notenough}% (%{_pos}%/%size of all players%)" to {_p}
	else:
		send join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.MISSINGCONFIG", 2, {_p}) to {_p}

function wolfoStart():
	{wolfo::debug::status} is true:
		set {wolfo::players::list::*} to {wolfo::debug::list::*}
		set {wolfo::players::alive::*} to {wolfo::debug::list::*}
		send wolfoGetText("PREFIX.GENERAL", 1), wolfoGetText("MESSAGE.DEVELOPER_MODE", 2, {_p}) to {wolfo::players::list::*}
	else:
		set {wolfo::players::list::*} to players
		set {wolfo::players::alive::*} to players
	send join wolfoGetText("PREFIX.GENERAL", 1), wolfoGetText("MESSAGE.PROJECT.TEXT", 2, {_p}) to {wolfo::players::list::*}
	send join wolfoGetObjects("MESSAGE.PROJECT.LIST") by ", " to {wolfo::players::list::*}
	loop {wolfo::players::list::*}:
		teleport loop-value to wolfoGetLoc("GAME.LOCATIONS.SPAWNPOINTS.%loop-index%")
		wolfoDebug("Teleport %loop-value%.")
	set time of world "world" to 12:00
	loop {wolfo::players::list::*}:
		clear {wolfo::cosmetic::%loop-value%::active}
		stopEffect "wolfo-%loop-value%"
	wait 5 seconds
	wolfoGiveRoles()

function wolfoEnd():
	loop all players:
		kick loop-player due to join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.ENDGAME", 2, loop-player)
	clear {wolfo::*}
	wolfoInitialize()

on join:
	set join message to ""
	if player is op:
		wolfoJoin(player)
	else if size of all players is greater than or equal to 25:
		kick player due to join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.TOOMANY", 2, player)
	else if {wolfo::game::start} is set:
		kick player due to join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.ALREADYSTART", 2, player)
	else if wolfoGetText("GAME.PRIVACY", 1) is "CLOSED":
		kick player due to join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.PRIVACY.CLOSED", 2, player)
	else if wolfoGetText("GAME.PRIVACY", 1) is "WHITELISTED":
		if wolfoGetObjects("GAME.WHITELIST", 1) do not contain player:
			kick player due to join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.PRIVACY.WHITELISTED", 2, player)
	else:
		wolfoJoin(player)

on quit:
	set quit message to ""
	wolfoLeave(player)

on click:
	if name of player's tool is wolfoGetText("ITEM.COSM", 2, player):
		cancel event
		wolfoCosmetic(1, player)
	else if name of player's tool is wolfoGetText("ITEM.COSM_OFF", 2, player):
		cancel event
		wolfoCosmetic(4, player)
	else if name of player's tool is wolfoGetText("ITEM.INFO", 2, player):
		cancel event
		wolfoMenuRoles(player)
	else if name of player's tool is wolfoGetText("ITEM.VOTE", 2, player):
		wolfoVote(player)
	else if name of player's tool is wolfoGetText("ITEM.EXIT", 2, player):
		cancel event
		kick player due to join wolfoGetText("PREFIX.GENERAL", 1) and wolfoGetText("MESSAGE.GOODLEFT", 2, player)
	else if name of player's tool is wolfoGetText("ITEM.SETUP", 2, player):
		cancel event
		wolfoMenu(player, "SETUP")
	else if name of player's tool is wolfoGetText("ITEM.MANAGE", 2, player):
		cancel event
		wolfoMenu(player, "MANAGE")

on drop:
	cancel event

on hunger meter change:
	cancel event

on weather change:
	cancel event

on damage of player:
	cancel event
